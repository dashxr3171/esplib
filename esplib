local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local localPlayer = Players.LocalPlayer
local camera = workspace.CurrentCamera
local cache = {}

local bones = {
    {"Head", "UpperTorso"},
    {"UpperTorso", "RightUpperArm"},
    {"RightUpperArm", "RightLowerArm"},
    {"RightLowerArm", "RightHand"},
    {"UpperTorso", "LeftUpperArm"},
    {"LeftUpperArm", "LeftLowerArm"},
    {"LeftLowerArm", "LeftHand"},
    {"UpperTorso", "LowerTorso"},
    {"LowerTorso", "LeftUpperLeg"},
    {"LeftUpperLeg", "LeftLowerLeg"},
    {"LeftLowerLeg", "LeftFoot"},
    {"LowerTorso", "RightUpperLeg"},
    {"RightUpperLeg", "RightLowerLeg"},
    {"RightLowerLeg", "RightFoot"}
}

local ESP_SETTINGS = {
    Enabled = true,
    Teamcheck = false, -- ENABLED NOW!
    TeamCheckESPMode = "Hide", -- "Hide" or "ColorChange"
    TeamCheckESPColor = Color3.fromRGB(0, 255, 0),
    WallCheck = false,
    WallCheckMode = "ColorChange", -- "ColorChange" or "Hide"
    ShowBox = false, -- ENABLED FOR TESTING
    BoxType = "Corner",
    BoxColor = Color3.fromRGB(255, 255, 255),
    BoxBorderColor = Color3.fromRGB(0, 0, 0),
    ShowBoxFilled = false,
    BoxFillColor = Color3.fromRGB(255, 255, 255),
    ShowName = false, -- ENABLED FOR TESTING
    NameColor = Color3.fromRGB(255, 255, 255),
    ShowHealth = false,
    HealthLowColor = Color3.fromRGB(255, 0, 0),
    HealthHighColor = Color3.fromRGB(0, 255, 0),
    HealthBorderColor = Color3.fromRGB(0, 0, 0),
    ShowDistance = false,
    DistanceColor = Color3.fromRGB(255, 255, 255),
    ShowSkeletons = false,
    SkeletonColor = Color3.fromRGB(255, 255, 255),
    SkeletonBorderColor = Color3.fromRGB(0, 0, 0),
    ShowTracer = false,
    TracerPosition = "Bottom",
    TracerColor = Color3.fromRGB(255, 255, 255),
    TracerBorderColor = Color3.fromRGB(0, 0, 0),
    TracerThickness = 1,
    InvisColor = Color3.fromRGB(255, 0, 0),
}

local HEALTH_BAR_WIDTH = 3
local displayedHealthPerc = {}

-- Function to check if two players are teammates
local function areTeammates(player1, player2)
    if not player1 or not player2 then return false end
    
    -- Method 1: Check Team objects
    local team1 = player1.Team
    local team2 = player2.Team
    if team1 and team2 and team1 == team2 then
        print("TEAMS MATCH (Team Objects):", team1.Name)
        return true
    end
    
    -- Method 2: Check TeamColor (some games use this)
    if team1 and team2 and team1.TeamColor == team2.TeamColor then
        print("TEAMS MATCH (Team Colors):", tostring(team1.TeamColor))
        return true
    end
    
    -- Method 3: Check custom team attributes
    local attr1 = player1:GetAttribute("Team")
    local attr2 = player2:GetAttribute("Team")
    if attr1 and attr2 and attr1 == attr2 then
        print("TEAMS MATCH (Attributes):", attr1)
        return true
    end
    
    -- Method 4: Check if players are in same group/faction (some games use this)
    local faction1 = player1:GetAttribute("Faction")
    local faction2 = player2:GetAttribute("Faction")
    if faction1 and faction2 and faction1 == faction2 then
        print("TEAMS MATCH (Faction):", faction1)
        return true
    end
    
    -- Method 5: Check if both have no team (neutral players)
    if not team1 and not team2 and not attr1 and not attr2 then
        print("BOTH PLAYERS NEUTRAL")
        return false -- Don't consider neutral players as teammates
    end
    
    print("NO TEAM MATCH FOUND")
    return false
end

local function create(class, properties)
    local drawing = Drawing.new(class)
    for property, value in pairs(properties) do
        drawing[property] = value
    end
    return drawing
end

local function safeRemove(obj)
    if not obj then return end
    if type(obj.Remove) == "function" then
        pcall(obj.Remove, obj)
        return
    end
    if type(obj) == "table" then
        for _, v in ipairs(obj) do
            if type(v) == "table" then
                for _, sub in ipairs(v) do
                    if sub and type(sub.Remove) == "function" then
                        pcall(sub.Remove, sub)
                    end
                end
            elseif v and type(v.Remove) == "function" then
                pcall(v.Remove, v)
            end
        end
    end
end

local function removeEsp(player)
    local esp = cache[player]
    if not esp then return end
    for _, v in pairs(esp) do
        safeRemove(v)
    end
    cache[player] = nil
    displayedHealthPerc[player] = nil
end

local function hideAllEsp(esp)
    for _, v in pairs(esp) do
        if type(v) == "table" then
            if v[1] and v[1].Visible ~= nil then
                for _, lineData in ipairs(v) do
                    if lineData.Visible ~= nil then
                        lineData.Visible = false
                    end
                end
            else
                for _, obj in ipairs(v) do
                    if obj and obj.Visible ~= nil then
                        obj.Visible = false
                    end
                end
            end
        elseif v and v.Visible ~= nil then
            v.Visible = false
        end
    end
    
    if esp.skeletonlines then
        for _, lineData in ipairs(esp.skeletonlines) do
            if lineData[1] and lineData[1].Visible ~= nil then
                lineData[1].Visible = false
            end
            if lineData[2] and lineData[2].Visible ~= nil then
                lineData[2].Visible = false
            end
        end
    end
    
    if esp.filledCornerBox then
        esp.filledCornerBox.Visible = false
    end
end

local function isPlayerBehindWall(player)
    local character = player.Character
    if not character then return false end
    
    local rootPart = character:FindFirstChild("HumanoidRootPart")
    if not rootPart then return false end
    
    local localCharacter = localPlayer.Character
    if not localCharacter then return false end
    
    local params = RaycastParams.new()
    params.FilterDescendantsInstances = {localCharacter, character}
    params.FilterType = Enum.RaycastFilterType.Blacklist
    params.IgnoreWater = true
    
    local origin = camera.CFrame.Position
    local direction = (rootPart.Position - origin).Unit * (rootPart.Position - origin).Magnitude
    
    local result = workspace:Raycast(origin, direction, params)
    return result ~= nil and result.Instance ~= nil
end

local function createCornerBoxLines(color, thickness)
    local lines = {}
    for i = 1, 8 do
        lines[i] = create("Line", {Color = color, Thickness = thickness, Transparency = 1, Visible = false})
    end
    return lines
end

local function updateCornerBoxLines(lines, pos, size)
    local lineLengthW = size.X / 4
    local lineLengthH = size.Y / 4
    
    lines[1].From = pos
    lines[1].To = Vector2.new(pos.X + lineLengthW, pos.Y)
    lines[2].From = pos
    lines[2].To = Vector2.new(pos.X, pos.Y + lineLengthH)
    lines[3].From = Vector2.new(pos.X + size.X, pos.Y)
    lines[3].To = Vector2.new(pos.X + size.X - lineLengthW, pos.Y)
    lines[4].From = Vector2.new(pos.X + size.X, pos.Y)
    lines[4].To = Vector2.new(pos.X + size.X, pos.Y + lineLengthH)
    lines[5].From = Vector2.new(pos.X, pos.Y + size.Y)
    lines[5].To = Vector2.new(pos.X + lineLengthW, pos.Y + size.Y)
    lines[6].From = Vector2.new(pos.X, pos.Y + size.Y)
    lines[6].To = Vector2.new(pos.X, pos.Y + size.Y - lineLengthH)
    lines[7].From = Vector2.new(pos.X + size.X, pos.Y + size.Y)
    lines[7].To = Vector2.new(pos.X + size.X - lineLengthW, pos.Y + size.Y)
    lines[8].From = Vector2.new(pos.X + size.X, pos.Y + size.Y)
    lines[8].To = Vector2.new(pos.X + size.X, pos.Y + size.Y - lineLengthH)
    
    for _, line in ipairs(lines) do
        line.Visible = true
    end
end

local function createEsp(player)
    local esp = {
        tracerBorder = create("Line", {Thickness = ESP_SETTINGS.TracerThickness + 2, Color = ESP_SETTINGS.TracerBorderColor, Visible = false}),
        tracer = create("Line", {Thickness = ESP_SETTINGS.TracerThickness, Color = ESP_SETTINGS.TracerColor, Visible = false}),
        boxBorder = create("Square", {Thickness = 3, Color = ESP_SETTINGS.BoxBorderColor, Filled = false, Visible = false}),
        box = create("Square", {Thickness = 1, Color = ESP_SETTINGS.BoxColor, Filled = false, Visible = false}),
        cornerBoxBorderLines = createCornerBoxLines(ESP_SETTINGS.BoxBorderColor, 3),
        cornerBoxLines = createCornerBoxLines(ESP_SETTINGS.BoxColor, 1),
        name = create("Text", {
            Outline = true,
            Color = ESP_SETTINGS.NameColor,
            OutlineColor = Color3.new(0, 0, 0),
            Center = true,
            Size = 13,
            Visible = false
        }),
        healthBorder = create("Square", {Filled = true, Color = ESP_SETTINGS.HealthBorderColor, Visible = false}),
        health = create("Square", {Filled = true, Color = ESP_SETTINGS.HealthHighColor, Visible = false}),
        distance = create("Text", {
            Outline = true,
            Color = ESP_SETTINGS.DistanceColor,
            OutlineColor = Color3.new(0, 0, 0),
            Center = true,
            Size = 15,
            Visible = false
        }),
        skeletonlines = {},
    }
    
    for _, bonePair in ipairs(bones) do
        local borderLine = create("Line", {Thickness = 3, Color = ESP_SETTINGS.SkeletonBorderColor, Visible = false})
        local mainLine = create("Line", {Thickness = 1, Color = ESP_SETTINGS.SkeletonColor, Visible = false})
        table.insert(esp.skeletonlines, {borderLine, mainLine, bonePair[1], bonePair[2]})
    end
    
    cache[player] = esp
end

local function updateEsp()
    if not ESP_SETTINGS.Enabled then
        for player, esp in pairs(cache) do
            hideAllEsp(esp)
        end
        return
    end
    
    for player, esp in pairs(cache) do
        if not player or not player.Parent then
            continue
        end
        
        local character = player.Character
        if not character or not character.Parent then
            hideAllEsp(esp)
            continue
        end
        
        -- TEAM CHECK - This is the important part!
        if ESP_SETTINGS.Teamcheck then
            print("=== CHECKING TEAMS ===")
            print("Local Player:", localPlayer.Name, "Team:", localPlayer.Team and localPlayer.Team.Name or "nil")
            print("Target Player:", player.Name, "Team:", player.Team and player.Team.Name or "nil")
            
            if areTeammates(localPlayer, player) then
                print("TEAMMATE DETECTED! Mode:", ESP_SETTINGS.TeamCheckESPMode)
                if ESP_SETTINGS.TeamCheckESPMode == "Hide" then
                    print("HIDING TEAMMATE ESP")
                    hideAllEsp(esp)
                    continue -- Skip to next player
                end
            end
            print("======================")
        end
        
        -- Wall check
        local isBehindWall = ESP_SETTINGS.WallCheck and isPlayerBehindWall(player)
        
        if isBehindWall and ESP_SETTINGS.WallCheckMode == "Hide" then
            hideAllEsp(esp)
            continue
        end
        
        local rootPart = character:FindFirstChild("HumanoidRootPart")
        local head = character:FindFirstChild("Head")
        local humanoid = character:FindFirstChild("Humanoid")

        if not (rootPart and head and humanoid) then
            hideAllEsp(esp)
            continue
        end
        
        local hrp2D, onScreen = camera:WorldToViewportPoint(rootPart.Position)
        if not onScreen then
            hideAllEsp(esp)
            continue
        end
        
        -- Calculate box dimensions
        local charHeight = math.abs(camera:WorldToViewportPoint(rootPart.Position - Vector3.new(0, 3, 0)).Y - camera:WorldToViewportPoint(rootPart.Position + Vector3.new(0, 2.6, 0)).Y)
        local boxSize = Vector2.new(math.floor(charHeight * 0.6), math.floor(charHeight))
        local boxPosition = Vector2.new(math.floor(hrp2D.X - boxSize.X / 2), math.floor(hrp2D.Y - boxSize.Y / 2))
        
        -- Determine colors
        local boxMainColor = ESP_SETTINGS.BoxColor
        local boxBorderColor = ESP_SETTINGS.BoxBorderColor
        local skeletonColor = ESP_SETTINGS.SkeletonColor
        local skeletonBorderColor = ESP_SETTINGS.SkeletonBorderColor
        local tracerColor = ESP_SETTINGS.TracerColor
        local tracerBorderColor = ESP_SETTINGS.TracerBorderColor
        local nameColor = ESP_SETTINGS.NameColor
        local distanceColor = ESP_SETTINGS.DistanceColor
        
        -- Apply team colors if teammate and ColorChange mode
        if ESP_SETTINGS.Teamcheck and areTeammates(localPlayer, player) and ESP_SETTINGS.TeamCheckESPMode == "ColorChange" then
            boxMainColor = ESP_SETTINGS.TeamCheckESPColor
            skeletonColor = ESP_SETTINGS.TeamCheckESPColor
            tracerColor = ESP_SETTINGS.TeamCheckESPColor
            nameColor = ESP_SETTINGS.TeamCheckESPColor
            distanceColor = ESP_SETTINGS.TeamCheckESPColor
        end
        
        -- Apply wall colors if behind wall and ColorChange mode
        if isBehindWall and ESP_SETTINGS.WallCheckMode == "ColorChange" then
            boxMainColor = ESP_SETTINGS.InvisColor
            skeletonColor = ESP_SETTINGS.InvisColor
            tracerColor = ESP_SETTINGS.InvisColor
            nameColor = ESP_SETTINGS.InvisColor
            distanceColor = ESP_SETTINGS.InvisColor
        end
        
        -- Update all colors
        esp.boxBorder.Color = boxBorderColor
        esp.box.Color = boxMainColor
        esp.tracer.Color = tracerColor
        esp.tracerBorder.Color = tracerBorderColor
        esp.name.Color = nameColor
        esp.distance.Color = distanceColor
        
        for _, line in ipairs(esp.cornerBoxLines) do
            line.Color = boxMainColor
        end
        for _, line in ipairs(esp.cornerBoxBorderLines) do
            line.Color = boxBorderColor
        end
        for _, lineData in ipairs(esp.skeletonlines) do
            lineData[2].Color = skeletonColor
            lineData[1].Color = skeletonBorderColor
        end
        
        -- Show Box
        if ESP_SETTINGS.ShowBox then
            if ESP_SETTINGS.BoxType == "Box" then
                esp.boxBorder.Size = boxSize
                esp.boxBorder.Position = boxPosition
                esp.boxBorder.Visible = true

                local fillInset = 2
                esp.box.Size = Vector2.new(boxSize.X - fillInset * 2, boxSize.Y - fillInset * 2)
                esp.box.Position = Vector2.new(boxPosition.X + fillInset, boxPosition.Y + fillInset)
                
                if ESP_SETTINGS.ShowBoxFilled then
                    esp.box.Filled = true
                    esp.box.Transparency = 0.5
                    esp.box.Color = ESP_SETTINGS.BoxFillColor
                else
                    esp.box.Filled = false
                    esp.box.Transparency = 1
                    esp.box.Color = boxMainColor
                end
                esp.box.Visible = true

                for _, line in ipairs(esp.cornerBoxBorderLines) do line.Visible = false end
                for _, line in ipairs(esp.cornerBoxLines) do line.Visible = false end
                
            elseif ESP_SETTINGS.BoxType == "Corner" then
                esp.boxBorder.Visible = false
                esp.box.Visible = false

                if ESP_SETTINGS.ShowBoxFilled then
                    local fillInset = 4
                    local fillPos = Vector2.new(boxPosition.X + fillInset, boxPosition.Y + fillInset)
                    local fillSize = Vector2.new(boxSize.X - fillInset * 2, boxSize.Y - fillInset * 2)

                    esp.filledCornerBox = esp.filledCornerBox or create("Square", {Filled = true, Transparency = 0.5, Color = ESP_SETTINGS.BoxFillColor, Visible = false})
                    esp.filledCornerBox.Position = fillPos
                    esp.filledCornerBox.Size = fillSize
                    esp.filledCornerBox.Visible = true
                else
                    if esp.filledCornerBox then
                        esp.filledCornerBox.Visible = false
                    end
                end

                updateCornerBoxLines(esp.cornerBoxBorderLines, boxPosition, boxSize)
                updateCornerBoxLines(esp.cornerBoxLines, boxPosition, boxSize)
            end
        else
            esp.boxBorder.Visible = false
            esp.box.Visible = false
            for _, line in ipairs(esp.cornerBoxBorderLines) do line.Visible = false end
            for _, line in ipairs(esp.cornerBoxLines) do line.Visible = false end
            if esp.filledCornerBox then esp.filledCornerBox.Visible = false end
        end

        -- Show Name
        if ESP_SETTINGS.ShowName then
            local pos = Vector2.new(boxPosition.X + boxSize.X / 2, boxPosition.Y - 16)
            esp.name.Text = player.Name
            esp.name.Position = pos
            esp.name.Visible = true
        else
            esp.name.Visible = false
        end

        -- Show Health
        if ESP_SETTINGS.ShowHealth then
            local realHealthPerc = math.clamp(humanoid.Health / math.max(humanoid.MaxHealth, 1), 0, 1)
            local prevHealth = displayedHealthPerc[player] or 1
            local lerpSpeed = 0.1
            local newHealth = prevHealth + (realHealthPerc - prevHealth) * lerpSpeed
            displayedHealthPerc[player] = newHealth

            local barHeight = boxSize.Y * newHealth
            local barX = boxPosition.X - HEALTH_BAR_WIDTH - 2
            local barY = boxPosition.Y + boxSize.Y - barHeight

            esp.healthBorder.Position = Vector2.new(barX - 1, boxPosition.Y)
            esp.healthBorder.Size = Vector2.new(HEALTH_BAR_WIDTH + 2, boxSize.Y)
            esp.healthBorder.Visible = true

            esp.health.Position = Vector2.new(barX, barY)
            esp.health.Size = Vector2.new(HEALTH_BAR_WIDTH, barHeight)
            esp.health.Color = ESP_SETTINGS.HealthLowColor:Lerp(ESP_SETTINGS.HealthHighColor, newHealth)
            esp.health.Visible = true
        else
            esp.healthBorder.Visible = false
            esp.health.Visible = false
        end

        -- Show Distance
        if ESP_SETTINGS.ShowDistance then
            local dist = math.floor((camera.CFrame.Position - rootPart.Position).Magnitude + 0.5)
            esp.distance.Text = string.format("[%d]", dist)
            local distPos = Vector2.new(boxPosition.X + boxSize.X / 2, boxPosition.Y + boxSize.Y + 2)
            esp.distance.Position = distPos
            esp.distance.Visible = true
        else
            esp.distance.Visible = false
        end

        -- Show Skeletons
        if ESP_SETTINGS.ShowSkeletons then
            for _, lineData in ipairs(esp.skeletonlines) do
                local borderLine, mainLine, parentBone, childBone = unpack(lineData)
                local parentPart = character:FindFirstChild(parentBone)
                local childPart = character:FindFirstChild(childBone)
                
                if parentPart and childPart then
                    local p1, onScreen1 = camera:WorldToViewportPoint(parentPart.Position)
                    local p2, onScreen2 = camera:WorldToViewportPoint(childPart.Position)
                    
                    if onScreen1 and onScreen2 then
                        borderLine.From = Vector2.new(p1.X, p1.Y)
                        borderLine.To = Vector2.new(p2.X, p2.Y)
                        mainLine.From = Vector2.new(p1.X, p1.Y)
                        mainLine.To = Vector2.new(p2.X, p2.Y)
                        borderLine.Visible = true
                        mainLine.Visible = true
                    else
                        borderLine.Visible = false
                        mainLine.Visible = false
                    end
                else
                    borderLine.Visible = false
                    mainLine.Visible = false
                end
            end
        else
            for _, lineData in ipairs(esp.skeletonlines) do
                lineData[1].Visible = false
                lineData[2].Visible = false
            end
        end

        -- Show Tracer
        if ESP_SETTINGS.ShowTracer then
            local tracerY = (ESP_SETTINGS.TracerPosition == "Top" and 0) or (ESP_SETTINGS.TracerPosition == "Middle" and camera.ViewportSize.Y / 2) or camera.ViewportSize.Y
            esp.tracerBorder.From = Vector2.new(camera.ViewportSize.X / 2, tracerY)
            esp.tracer.From = Vector2.new(camera.ViewportSize.X / 2, tracerY)
            esp.tracerBorder.To = Vector2.new(hrp2D.X, hrp2D.Y)
            esp.tracer.To = Vector2.new(hrp2D.X, hrp2D.Y)
            esp.tracerBorder.Visible = true
            esp.tracer.Visible = true
        else
            esp.tracerBorder.Visible = false
            esp.tracer.Visible = false
        end
    end
end

local function onPlayerAdded(player)
    player.CharacterAdded:Connect(function()
        wait(1)
        if cache[player] == nil then
            createEsp(player)
        end
    end)
end

for _, player in pairs(Players:GetPlayers()) do
    if player ~= localPlayer then
        createEsp(player)
        onPlayerAdded(player)
    end
end

Players.PlayerAdded:Connect(function(player)
    if player ~= localPlayer then
        createEsp(player)
        onPlayerAdded(player)
    end
end)

Players.PlayerRemoving:Connect(function(player)
    removeEsp(player)
end)

RunService.RenderStepped:Connect(function()
    updateEsp()
end)

return ESP_SETTINGS
