-- esp.lua
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local localPlayer = Players.LocalPlayer
local camera = workspace.CurrentCamera
local cache = {}

local bones = {
    {"Head", "UpperTorso"},
    {"UpperTorso", "RightUpperArm"},
    {"RightUpperArm", "RightLowerArm"},
    {"RightLowerArm", "RightHand"},
    {"UpperTorso", "LeftUpperArm"},
    {"LeftUpperArm", "LeftLowerArm"},
    {"LeftLowerArm", "LeftHand"},
    {"UpperTorso", "LowerTorso"},
    {"LowerTorso", "LeftUpperLeg"},
    {"LeftUpperLeg", "LeftLowerLeg"},
    {"LeftLowerLeg", "LeftFoot"},
    {"LowerTorso", "RightUpperLeg"},
    {"RightUpperLeg", "RightLowerLeg"},
    {"RightLowerLeg", "RightFoot"}
}

local ESP_SETTINGS = {
    MainThemeColor = Color3.fromRGB(255, 255, 255),
    BorderColor = Color3.fromRGB(0, 0, 0),
    TracerThickness = 1,
    CharSize = Vector2.new(4, 6),
    Teamcheck = false,
    WallCheck = false,
    Enabled = false,
    ShowBox = false,
    BoxType = "2D",
    ShowName = false,
    ShowHealth = false,
    ShowDistance = false,
    ShowSkeletons = false,
    ShowTracer = false,
    TracerPosition = "Bottom",
}

local function create(class, properties)
    local drawing = Drawing.new(class)
    for property, value in pairs(properties) do
        drawing[property] = value
    end
    return drawing
end

local function safeRemove(obj)
    if not obj then return end
    if type(obj.Remove) == "function" then
        pcall(obj.Remove, obj)
        return
    end
    if type(obj) == "table" then
        for _, v in ipairs(obj) do
            if type(v) == "table" then
                for _, sub in ipairs(v) do
                    if sub and type(sub.Remove) == "function" then
                        pcall(sub.Remove, sub)
                    end
                end
            elseif v and type(v.Remove) == "function" then
                pcall(v.Remove, v)
            end
        end
    end
end

local function removeEsp(player)
    local esp = cache[player]
    if not esp then return end
    for _, v in pairs(esp) do
        safeRemove(v)
    end
    cache[player] = nil
end

local function isPlayerBehindWall(player)
    local character = player.Character
    if not character then return false end
    local rootPart = character:FindFirstChild("HumanoidRootPart")
    if not rootPart then return false end
    local ray = Ray.new(camera.CFrame.Position, (rootPart.Position - camera.CFrame.Position).Unit * (rootPart.Position - camera.CFrame.Position).Magnitude)
    local hit = workspace:FindPartOnRayWithIgnoreList(ray, {localPlayer.Character, character})
    return hit and hit:IsA("Part")
end

local function createEsp(player)
    local esp = {
        tracerBorder = create("Line", {Thickness = ESP_SETTINGS.TracerThickness + 2, Color = ESP_SETTINGS.BorderColor}),
        tracer = create("Line", {Thickness = ESP_SETTINGS.TracerThickness, Color = ESP_SETTINGS.MainThemeColor}),

        boxBorder = create("Square", {Thickness = 3, Color = ESP_SETTINGS.BorderColor, Filled = false}),
        box = create("Square", {Thickness = 1, Color = ESP_SETTINGS.MainThemeColor, Filled = false}),

        nameBorder = create("Text", {Outline = true, Color = ESP_SETTINGS.BorderColor, Center = true, Size = 15}),
        name = create("Text", {Outline = true, Color = ESP_SETTINGS.MainThemeColor, Center = true, Size = 13}),

        healthBorder = create("Line", {Thickness = 3, Color = ESP_SETTINGS.BorderColor}),
        health = create("Line", {Thickness = 1, Color = ESP_SETTINGS.MainThemeColor}),

        distanceBorder = create("Text", {Outline = true, Color = ESP_SETTINGS.BorderColor, Center = true, Size = 14}),
        distance = create("Text", {Outline = true, Color = ESP_SETTINGS.MainThemeColor, Center = true, Size = 12}),

        skeletonlines = {},
    }

    -- Pre-create skeleton lines with borders
    for _, bonePair in ipairs(bones) do
        local borderLine = create("Line", {Thickness = 3, Color = ESP_SETTINGS.BorderColor})
        local mainLine = create("Line", {Thickness = 1, Color = ESP_SETTINGS.MainThemeColor})
        table.insert(esp.skeletonlines, {borderLine, mainLine, bonePair[1], bonePair[2]})
    end

    cache[player] = esp
end

local function updateEsp()
    for player, esp in pairs(cache) do
        local character, team = player.Character, player.Team
        if character and (not ESP_SETTINGS.Teamcheck or (team and team ~= localPlayer.Team)) then
            local rootPart = character:FindFirstChild("HumanoidRootPart")
            local head = character:FindFirstChild("Head")
            local humanoid = character:FindFirstChild("Humanoid")
            local isBehindWall = ESP_SETTINGS.WallCheck and isPlayerBehindWall(player)
            local shouldShow = not isBehindWall and ESP_SETTINGS.Enabled
            if rootPart and head and humanoid and shouldShow then
                local hrp2D, onScreen = camera:WorldToViewportPoint(rootPart.Position)
                if onScreen then
                    local charHeight = math.abs(camera:WorldToViewportPoint(rootPart.Position - Vector3.new(0, 3, 0)).Y - camera:WorldToViewportPoint(rootPart.Position + Vector3.new(0, 2.6, 0)).Y)
                    local boxSize = Vector2.new(math.floor(charHeight * 0.6), math.floor(charHeight))
                    local boxPosition = Vector2.new(math.floor(hrp2D.X - boxSize.X / 2), math.floor(hrp2D.Y - boxSize.Y / 2))

                    -- Box
                    if ESP_SETTINGS.ShowBox then
                        esp.boxBorder.Size, esp.boxBorder.Position = boxSize, boxPosition
                        esp.box.Size, esp.box.Position = boxSize, boxPosition
                        esp.boxBorder.Visible, esp.box.Visible = true, true
                    else
                        esp.boxBorder.Visible, esp.box.Visible = false, false
                    end

                    -- Name
                    if ESP_SETTINGS.ShowName then
                        local pos = Vector2.new(boxPosition.X + boxSize.X / 2, boxPosition.Y - 16)
                        esp.nameBorder.Text, esp.name.Text = player.Name, player.Name
                        esp.nameBorder.Position, esp.name.Position = pos, pos
                        esp.nameBorder.Visible, esp.name.Visible = true, true
                    else
                        esp.nameBorder.Visible, esp.name.Visible = false, false
                    end

                    -- Health
                    if ESP_SETTINGS.ShowHealth then
                        local healthPercentage = humanoid.Health / (humanoid.MaxHealth > 0 and humanoid.MaxHealth or 1)
                        local from = Vector2.new(boxPosition.X - 6, boxPosition.Y + boxSize.Y)
                        local to = Vector2.new(from.X, from.Y - healthPercentage * boxSize.Y)
                        esp.healthBorder.From, esp.healthBorder.To = Vector2.new(from.X - 1, from.Y), Vector2.new(from.X - 1, from.Y - boxSize.Y)
                        esp.health.From, esp.health.To = from, to
                        esp.healthBorder.Visible, esp.health.Visible = true, true
                    else
                        esp.healthBorder.Visible, esp.health.Visible = false, false
                    end

                    -- Distance
                    if ESP_SETTINGS.ShowDistance then
                        local distanceText = string.format("%.1f studs", (camera.CFrame.p - rootPart.Position).Magnitude)
                        local pos = Vector2.new(boxPosition.X + boxSize.X / 2, boxPosition.Y + boxSize.Y + 5)
                        esp.distanceBorder.Text, esp.distance.Text = distanceText, distanceText
                        esp.distanceBorder.Position, esp.distance.Position = pos, pos
                        esp.distanceBorder.Visible, esp.distance.Visible = true, true
                    else
                        esp.distanceBorder.Visible, esp.distance.Visible = false, false
                    end

                    -- Skeleton
                    if ESP_SETTINGS.ShowSkeletons then
                        for _, lineData in ipairs(esp.skeletonlines) do
                            local borderLine, mainLine, parentBone, childBone = unpack(lineData)
                            if character:FindFirstChild(parentBone) and character:FindFirstChild(childBone) then
                                local p1 = camera:WorldToViewportPoint(character[parentBone].Position)
                                local p2 = camera:WorldToViewportPoint(character[childBone].Position)
                                borderLine.From, borderLine.To = Vector2.new(p1.X, p1.Y), Vector2.new(p2.X, p2.Y)
                                mainLine.From, mainLine.To = Vector2.new(p1.X, p1.Y), Vector2.new(p2.X, p2.Y)
                                borderLine.Visible, mainLine.Visible = true, true
                            else
                                borderLine.Visible, mainLine.Visible = false, false
                            end
                        end
                    else
                        for _, lineData in ipairs(esp.skeletonlines) do
                            lineData[1].Visible, lineData[2].Visible = false, false
                        end
                    end

                    -- Tracer
                    if ESP_SETTINGS.ShowTracer then
                        local tracerY = (ESP_SETTINGS.TracerPosition == "Top" and 0) or (ESP_SETTINGS.TracerPosition == "Middle" and camera.ViewportSize.Y / 2) or camera.ViewportSize.Y
                        esp.tracerBorder.From, esp.tracer.From = Vector2.new(camera.ViewportSize.X / 2, tracerY), Vector2.new(camera.ViewportSize.X / 2, tracerY)
                        esp.tracerBorder.To, esp.tracer.To = Vector2.new(hrp2D.X, hrp2D.Y), Vector2.new(hrp2D.X, hrp2D.Y)
                        esp.tracerBorder.Visible, esp.tracer.Visible = true, true
                    else
                        esp.tracerBorder.Visible, esp.tracer.Visible = false, false
                    end

                else
                    for _, v in pairs(esp) do
                        if type(v) == "table" then
                            for _, obj in ipairs(v) do if obj.Visible ~= nil then obj.Visible = false end end
                        elseif v.Visible ~= nil then
                            v.Visible = false
                        end
                    end
                end
            end
        else
            for _, v in pairs(esp) do
                if type(v) == "table" then
                    for _, obj in ipairs(v) do if obj.Visible ~= nil then obj.Visible = false end end
                elseif v.Visible ~= nil then
                    v.Visible = false
                end
            end
        end
    end
end

for _, player in ipairs(Players:GetPlayers()) do
    if player ~= localPlayer then
        createEsp(player)
    end
end
Players.PlayerAdded:Connect(function(player) if player ~= localPlayer then createEsp(player) end end)
Players.PlayerRemoving:Connect(removeEsp)
RunService.RenderStepped:Connect(updateEsp)

return ESP_SETTINGS
