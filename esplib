local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local localPlayer = Players.LocalPlayer
local camera = workspace.CurrentCamera
local cache = {}

local bones = {
    {"Head", "UpperTorso"},
    {"UpperTorso", "RightUpperArm"},
    {"RightUpperArm", "RightLowerArm"},
    {"RightLowerArm", "RightHand"},
    {"UpperTorso", "LeftUpperArm"},
    {"LeftUpperArm", "LeftLowerArm"},
    {"LeftLowerArm", "LeftHand"},
    {"UpperTorso", "LowerTorso"},
    {"LowerTorso", "LeftUpperLeg"},
    {"LeftUpperLeg", "LeftLowerLeg"},
    {"LeftLowerLeg", "LeftFoot"},
    {"LowerTorso", "RightUpperLeg"},
    {"RightUpperLeg", "RightLowerLeg"},
    {"RightLowerLeg", "RightFoot"}
}

local ESP_SETTINGS = {
    Enabled = false,
    Teamcheck = false,
    TeamCheckESPMode = "Hide",
    TeamCheckESPColor = Color3.fromRGB(0, 255, 0),
    WallCheck = false,
    WallCheckMode = "ColorChange",
    ShowBox = false,
    BoxType = "Corner", -- "Box" or "Corner"
    BoxColor = Color3.fromRGB(255, 255, 255),
    BoxBorderColor = Color3.fromRGB(0, 0, 0),
    ShowBoxFilled = false,
    BoxFillColor = Color3.fromRGB(255, 255, 255),
    ShowName = false,
    NameColor = Color3.fromRGB(255, 255, 255),
    ShowHealth = false,
    HealthLowColor = Color3.fromRGB(255, 0, 0),
    HealthHighColor = Color3.fromRGB(0, 255, 0),
    HealthBorderColor = Color3.fromRGB(0, 0, 0),
    ShowDistance = false,
    DistanceColor = Color3.fromRGB(255, 255, 255),
    ShowSkeletons = false,
    SkeletonColor = Color3.fromRGB(255, 255, 255),
    SkeletonBorderColor = Color3.fromRGB(0, 0, 0),
    ShowTracer = false,
    TracerPosition = "Bottom", -- "Top", "Middle", or "Bottom"
    TracerColor = Color3.fromRGB(255, 255, 255),
    TracerBorderColor = Color3.fromRGB(0, 0, 0),
    TracerThickness = 1,
    InvisColor = Color3.fromRGB(255, 0, 0),
}

local HEALTH_BAR_WIDTH = 3
local displayedHealthPerc = {}

local function create(class, properties)
    local drawing = Drawing.new(class)
    for property, value in pairs(properties) do
        drawing[property] = value
    end
    return drawing
end

local function safeRemove(obj)
    if not obj then return end
    if type(obj.Remove) == "function" then
        pcall(obj.Remove, obj)
        return
    end
    if type(obj) == "table" then
        for _, v in ipairs(obj) do
            if type(v) == "table" then
                for _, sub in ipairs(v) do
                    if sub and type(sub.Remove) == "function" then
                        pcall(sub.Remove, sub)
                    end
                end
            elseif v and type(v.Remove) == "function" then
                pcall(v.Remove, v)
            end
        end
    end
end

local function removeEsp(entity)
    local esp = cache[entity]
    if not esp then return end
    for _, v in pairs(esp) do
        safeRemove(v)
    end
    cache[entity] = nil
    displayedHealthPerc[entity] = nil
end

local function isEntityBehindWall(entity)
    if not entity then return false end
    local rootPart = entity:FindFirstChild("HumanoidRootPart") or entity:FindFirstChild("Torso") or entity:FindFirstChild("UpperTorso")
    if not rootPart then return false end
    local params = RaycastParams.new()
    params.FilterDescendantsInstances = {localPlayer.Character, entity}
    params.FilterType = Enum.RaycastFilterType.Blacklist
    params.IgnoreWater = true
    local origin = camera.CFrame.Position
    local direction = rootPart.Position - origin
    local result = workspace:Raycast(origin, direction, params)
    return result ~= nil
end

local function createCornerBoxLines(color, thickness)
    local lines = {}
    for i = 1, 8 do
        lines[i] = create("Line", {Color = color, Thickness = thickness, Transparency = 1})
    end
    return lines
end

local function updateCornerBoxLines(lines, pos, size)
    local lineLengthW = size.X / 4
    local lineLengthH = size.Y / 4
    lines[1].From = pos
    lines[1].To = Vector2.new(pos.X + lineLengthW, pos.Y)
    lines[2].From = pos
    lines[2].To = Vector2.new(pos.X, pos.Y + lineLengthH)
    lines[3].From = Vector2.new(pos.X + size.X, pos.Y)
    lines[3].To = Vector2.new(pos.X + size.X - lineLengthW, pos.Y)
    lines[4].From = Vector2.new(pos.X + size.X, pos.Y)
    lines[4].To = Vector2.new(pos.X + size.X, pos.Y + lineLengthH)
    lines[5].From = Vector2.new(pos.X, pos.Y + size.Y)
    lines[5].To = Vector2.new(pos.X + lineLengthW, pos.Y + size.Y)
    lines[6].From = Vector2.new(pos.X, pos.Y + size.Y)
    lines[6].To = Vector2.new(pos.X, pos.Y + size.Y - lineLengthH)
    lines[7].From = Vector2.new(pos.X + size.X, pos.Y + size.Y)
    lines[7].To = Vector2.new(pos.X + size.X - lineLengthW, pos.Y + size.Y)
    lines[8].From = Vector2.new(pos.X + size.X, pos.Y + size.Y)
    lines[8].To = Vector2.new(pos.X + size.X, pos.Y + size.Y - lineLengthH)
    for _, line in ipairs(lines) do
        line.Visible = true
    end
end

local function createEsp(entity)
    local esp = {
        tracerBorder = create("Line", {Thickness = ESP_SETTINGS.TracerThickness + 2, Color = ESP_SETTINGS.TracerBorderColor}),
        tracer = create("Line", {Thickness = ESP_SETTINGS.TracerThickness, Color = ESP_SETTINGS.TracerColor}),
        boxBorder = create("Square", {Thickness = 3, Color = ESP_SETTINGS.BoxBorderColor, Filled = false}),
        box = create("Square", {Thickness = 1, Color = ESP_SETTINGS.BoxColor, Filled = false}),
        cornerBoxBorderLines = createCornerBoxLines(ESP_SETTINGS.BoxBorderColor, 3),
        cornerBoxLines = createCornerBoxLines(ESP_SETTINGS.BoxColor, 1),
        name = create("Text", {
            Outline = true,
            Color = ESP_SETTINGS.NameColor,
            OutlineColor = Color3.new(0, 0, 0),
            Center = true,
            Size = 13,
        }),
        healthBorder = create("Square", {Filled = true, Color = ESP_SETTINGS.HealthBorderColor}),
        health = create("Square", {Filled = true, Color = ESP_SETTINGS.HealthHighColor}),
        distance = create("Text", {
            Outline = true,
            Color = ESP_SETTINGS.DistanceColor,
            OutlineColor = Color3.new(0, 0, 0),
            Center = true,
            Size = 15,
        }),
        skeletonlines = {},
    }
    -- Only player characters get skeleton lines
    local player = Players:GetPlayerFromCharacter(entity)
    if player then
        for _, bonePair in ipairs(bones) do
            local borderLine = create("Line", {Thickness = 3, Color = ESP_SETTINGS.SkeletonBorderColor})
            local mainLine = create("Line", {Thickness = 1, Color = ESP_SETTINGS.SkeletonColor})
            table.insert(esp.skeletonlines, {borderLine, mainLine, bonePair[1], bonePair[2]})
        end
    end
    cache[entity] = esp
end

local function getModelBoundingBoxCorners(model)
    local parts = {}
    for _, descendant in ipairs(model:GetDescendants()) do
        if descendant:IsA("BasePart") then
            table.insert(parts, descendant)
        end
    end
    if #parts == 0 then
        return nil
    end

    local minX, minY, minZ = math.huge, math.huge, math.huge
    local maxX, maxY, maxZ = -math.huge, -math.huge, -math.huge

    for _, part in ipairs(parts) do
        local cframe = part.CFrame
        local size = part.Size
        local corners = {
            cframe * Vector3.new(size.X / 2, size.Y / 2, size.Z / 2),
            cframe * Vector3.new(size.X / 2, size.Y / 2, -size.Z / 2),
            cframe * Vector3.new(size.X / 2, -size.Y / 2, size.Z / 2),
            cframe * Vector3.new(size.X / 2, -size.Y / 2, -size.Z / 2),
            cframe * Vector3.new(-size.X / 2, size.Y / 2, size.Z / 2),
            cframe * Vector3.new(-size.X / 2, size.Y / 2, -size.Z / 2),
            cframe * Vector3.new(-size.X / 2, -size.Y / 2, size.Z / 2),
            cframe * Vector3.new(-size.X / 2, -size.Y / 2, -size.Z / 2),
        }
        for _, corner in ipairs(corners) do
            minX = math.min(minX, corner.X)
            minY = math.min(minY, corner.Y)
            minZ = math.min(minZ, corner.Z)
            maxX = math.max(maxX, corner.X)
            maxY = math.max(maxY, corner.Y)
            maxZ = math.max(maxZ, corner.Z)
        end
    end

    local cornersWorld = {
        Vector3.new(minX, minY, minZ),
        Vector3.new(minX, minY, maxZ),
        Vector3.new(minX, maxY, minZ),
        Vector3.new(minX, maxY, maxZ),
        Vector3.new(maxX, minY, minZ),
        Vector3.new(maxX, minY, maxZ),
        Vector3.new(maxX, maxY, minZ),
        Vector3.new(maxX, maxY, maxZ),
    }
    return cornersWorld
end

local function updateEsp()
    for entity, esp in pairs(cache) do
        local character = entity
        local player = Players:GetPlayerFromCharacter(character)
        local isPlayerEntity = player ~= nil
        local humanoid = character:FindFirstChildWhichIsA("Humanoid")
        local rootPart = character:FindFirstChild("HumanoidRootPart") or character:FindFirstChild("Torso") or character:FindFirstChild("UpperTorso")

        -- Validate character presence and visibility
        if not character.Parent or not rootPart then
            -- Hide ESP if character disappeared or invalid
            for _, v in pairs(esp) do
                if type(v) == "table" then
                    for _, obj in ipairs(v) do
                        if obj.Visible ~= nil then obj.Visible = false end
                    end
                elseif v.Visible ~= nil then
                    v.Visible = false
                end
            end
            for _, lineData in ipairs(esp.skeletonlines) do
                lineData[1].Visible = false
                lineData[2].Visible = false
            end
            goto continue
        end

        -- Wall check and team check
        local shouldShow = false
        local boxMainColor = ESP_SETTINGS.BoxColor
        local boxBorderColor = ESP_SETTINGS.BoxBorderColor
        local skeletonColor = ESP_SETTINGS.SkeletonColor
        local skeletonBorderColor = ESP_SETTINGS.SkeletonBorderColor
        local tracerColor = ESP_SETTINGS.TracerColor
        local tracerBorderColor = ESP_SETTINGS.TracerBorderColor
        local nameColor = ESP_SETTINGS.NameColor
        local distanceColor = ESP_SETTINGS.DistanceColor

        if ESP_SETTINGS.Enabled then
            if ESP_SETTINGS.Teamcheck and isPlayerEntity and player.Team and localPlayer.Team and player.Team == localPlayer.Team then
                if ESP_SETTINGS.TeamCheckESPMode == "Hide" then
                    shouldShow = false
                elseif ESP_SETTINGS.TeamCheckESPMode == "ColorChange" then
                    shouldShow = true
                    boxMainColor = ESP_SETTINGS.TeamCheckESPColor
                end
            else
                shouldShow = true
            end

            if shouldShow and ESP_SETTINGS.WallCheck and isEntityBehindWall(character) then
                if ESP_SETTINGS.WallCheckMode == "ColorChange" then
                    boxMainColor = ESP_SETTINGS.InvisColor
                elseif ESP_SETTINGS.WallCheckMode == "Hide" then
                    shouldShow = false
                end
            end
        else
            shouldShow = false
        end

        if shouldShow then
            -- Calculate box and positions

            local hrp2D, onScreen = camera:WorldToViewportPoint(rootPart.Position)

            if onScreen then
                local boxPosition, boxSize

                if isPlayerEntity then
                    -- Player box based on HumanoidRootPart and approximate height
                    local charHeight = math.abs(camera:WorldToViewportPoint(rootPart.Position - Vector3.new(0, 3, 0)).Y - camera:WorldToViewportPoint(rootPart.Position + Vector3.new(0, 2.6, 0)).Y)
                    boxSize = Vector2.new(math.floor(charHeight * 0.6), math.floor(charHeight))
                    boxPosition = Vector2.new(math.floor(hrp2D.X - boxSize.X / 2), math.floor(hrp2D.Y - boxSize.Y / 2))
                else
                    -- Mob: calculate bounding box around entire model
                    local corners = getModelBoundingBoxCorners(character)
                    if corners == nil then
                        goto hide_esp
                    end

                    local minX, minY = math.huge, math.huge
                    local maxX, maxY = -math.huge, -math.huge
                    local visibleCorners = 0
                    for _, corner in ipairs(corners) do
                        local screenPos, visible = camera:WorldToViewportPoint(corner)
                        if visible then
                            visibleCorners = visibleCorners + 1
                            minX = math.min(minX, screenPos.X)
                            minY = math.min(minY, screenPos.Y)
                            maxX = math.max(maxX, screenPos.X)
                            maxY = math.max(maxY, screenPos.Y)
                        end
                    end

                    if visibleCorners == 0 then
                        goto hide_esp
                    end

                    boxPosition = Vector2.new(minX, minY)
                    boxSize = Vector2.new(maxX - minX, maxY - minY)
                end

                esp.box.Color = boxMainColor
                esp.boxBorder.Color = boxBorderColor

                for _, line in ipairs(esp.cornerBoxLines) do
                    line.Color = boxMainColor
                end
                for _, line in ipairs(esp.cornerBoxBorderLines) do
                    line.Color = boxBorderColor
                end

                for _, lineData in ipairs(esp.skeletonlines) do
                    lineData[2].Color = skeletonColor
                    lineData[1].Color = skeletonBorderColor
                end

                esp.tracer.Color = tracerColor
                esp.tracerBorder.Color = tracerBorderColor

                esp.name.Color = nameColor
                esp.distance.Color = distanceColor

                -- Box display
                if ESP_SETTINGS.ShowBox then
                    if ESP_SETTINGS.BoxType == "Box" then
                        esp.boxBorder.Size = boxSize
                        esp.boxBorder.Position = boxPosition
                        esp.boxBorder.Visible = true

                        esp.box.Size = boxSize
                        esp.box.Position = boxPosition
                        if ESP_SETTINGS.ShowBoxFilled then
                            esp.box.Filled = true
                            esp.box.Transparency = 0.5
                            esp.box.Color = ESP_SETTINGS.BoxFillColor
                        else
                            esp.box.Filled = false
                            esp.box.Transparency = 1
                            esp.box.Color = boxMainColor
                        end
                        esp.box.Visible = true

                        for _, line in ipairs(esp.cornerBoxBorderLines) do line.Visible = false end
                        for _, line in ipairs(esp.cornerBoxLines) do line.Visible = false end
                    elseif ESP_SETTINGS.BoxType == "Corner" then
                        esp.boxBorder.Visible = false
                        esp.box.Visible = false
                        updateCornerBoxLines(esp.cornerBoxBorderLines, boxPosition, boxSize)
                        updateCornerBoxLines(esp.cornerBoxLines, boxPosition, boxSize)
                    else
                        esp.boxBorder.Visible = false
                        esp.box.Visible = false
                        for _, line in ipairs(esp.cornerBoxBorderLines) do line.Visible = false end
                        for _, line in ipairs(esp.cornerBoxLines) do line.Visible = false end
                    end
                else
                    esp.boxBorder.Visible = false
                    esp.box.Visible = false
                    for _, line in ipairs(esp.cornerBoxBorderLines) do line.Visible = false end
                    for _, line in ipairs(esp.cornerBoxLines) do line.Visible = false end
                end

                -- Show name
                if ESP_SETTINGS.ShowName then
                    local pos = Vector2.new(boxPosition.X + boxSize.X / 2, boxPosition.Y - 16)
                    if isPlayerEntity then
                        esp.name.Text = player.Name
                    else
                        esp.name.Text = character.Name or "Mob"
                    end
                    esp.name.Position = pos
                    esp.name.Visible = true
                else
                    esp.name.Visible = false
                end

                -- Show Health Bar
                if ESP_SETTINGS.ShowHealth and humanoid and humanoid.Health and humanoid.MaxHealth then
                    local healthPerc = math.clamp(humanoid.Health / humanoid.MaxHealth, 0, 1)
                    local healthHeight = boxSize.Y * healthPerc
                    local healthY = boxPosition.Y + boxSize.Y - healthHeight

                    esp.healthBorder.Position = Vector2.new(boxPosition.X - HEALTH_BAR_WIDTH - 2, boxPosition.Y - 1)
                    esp.healthBorder.Size = Vector2.new(HEALTH_BAR_WIDTH, boxSize.Y + 2)
                    esp.healthBorder.Visible = true

                    esp.health.Position = Vector2.new(boxPosition.X - HEALTH_BAR_WIDTH - 1, healthY)
                    esp.health.Size = Vector2.new(HEALTH_BAR_WIDTH - 1, healthHeight + 1)

                    -- Health color gradient
                    esp.health.Color = ESP_SETTINGS.HealthLowColor:Lerp(ESP_SETTINGS.HealthHighColor, healthPerc)
                    esp.health.Visible = true
                else
                    esp.healthBorder.Visible = false
                    esp.health.Visible = false
                end

                -- Show distance
                if ESP_SETTINGS.ShowDistance then
                    local dist = math.floor((rootPart.Position - camera.CFrame.Position).Magnitude)
                    esp.distance.Text = tostring(dist) .. " studs"
                    esp.distance.Position = Vector2.new(boxPosition.X + boxSize.X / 2, boxPosition.Y + boxSize.Y + 3)
                    esp.distance.Visible = true
                else
                    esp.distance.Visible = false
                end

                -- Show Tracer
                if ESP_SETTINGS.ShowTracer then
                    local fromPos
                    if ESP_SETTINGS.TracerPosition == "Top" then
                        fromPos = Vector2.new(camera.ViewportSize.X / 2, 0)
                    elseif ESP_SETTINGS.TracerPosition == "Middle" then
                        fromPos = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)
                    else -- Bottom default
                        fromPos = Vector2.new(camera.ViewportSize.X / 2, camera.ViewportSize.Y)
                    end
                    esp.tracer.From = fromPos
                    esp.tracer.To = Vector2.new(hrp2D.X, hrp2D.Y)
                    esp.tracer.Visible = true

                    esp.tracerBorder.From = fromPos
                    esp.tracerBorder.To = Vector2.new(hrp2D.X, hrp2D.Y)
                    esp.tracerBorder.Visible = true
                else
                    esp.tracer.Visible = false
                    esp.tracerBorder.Visible = false
                end

                -- Show skeleton for players
                if ESP_SETTINGS.ShowSkeletons and isPlayerEntity then
                    for _, lineData in ipairs(esp.skeletonlines) do
                        local borderLine, mainLine, fromBone, toBone = unpack(lineData)
                        local fromPart = character:FindFirstChild(fromBone)
                        local toPart = character:FindFirstChild(toBone)
                        if fromPart and toPart then
                            local fromPos, visibleFrom = camera:WorldToViewportPoint(fromPart.Position)
                            local toPos, visibleTo = camera:WorldToViewportPoint(toPart.Position)
                            if visibleFrom and visibleTo then
                                borderLine.From = Vector2.new(fromPos.X, fromPos.Y)
                                borderLine.To = Vector2.new(toPos.X, toPos.Y)
                                borderLine.Visible = true

                                mainLine.From = Vector2.new(fromPos.X, fromPos.Y)
                                mainLine.To = Vector2.new(toPos.X, toPos.Y)
                                mainLine.Visible = true
                            else
                                borderLine.Visible = false
                                mainLine.Visible = false
                            end
                        else
                            borderLine.Visible = false
                            mainLine.Visible = false
                        end
                    end
                else
                    for _, lineData in ipairs(esp.skeletonlines) do
                        lineData[1].Visible = false
                        lineData[2].Visible = false
                    end
                end
            else
                -- Off screen, hide all parts
                esp.boxBorder.Visible = false
                esp.box.Visible = false
                for _, line in ipairs(esp.cornerBoxBorderLines) do line.Visible = false end
                for _, line in ipairs(esp.cornerBoxLines) do line.Visible = false end
                esp.name.Visible = false
                esp.health.Visible = false
                esp.healthBorder.Visible = false
                esp.distance.Visible = false
                esp.tracer.Visible = false
                esp.tracerBorder.Visible = false
                for _, lineData in ipairs(esp.skeletonlines) do
                    lineData[1].Visible = false
                    lineData[2].Visible = false
                end
            end
        else
            -- ESP Disabled or team/wallcheck hide
            esp.boxBorder.Visible = false
            esp.box.Visible = false
            for _, line in ipairs(esp.cornerBoxBorderLines) do line.Visible = false end
            for _, line in ipairs(esp.cornerBoxLines) do line.Visible = false end
            esp.name.Visible = false
            esp.health.Visible = false
            esp.healthBorder.Visible = false
            esp.distance.Visible = false
            esp.tracer.Visible = false
            esp.tracerBorder.Visible = false
            for _, lineData in ipairs(esp.skeletonlines) do
                lineData[1].Visible = false
                lineData[2].Visible = false
            end
        end

        ::continue::
    end
end

-- Scan workspace for player characters and mobs, add/remove ESP accordingly
local function updateEspCache()
    local currentCharacters = {}

    -- Add player characters found in workspace
    for _, player in ipairs(Players:GetPlayers()) do
        local character = player.Character
        if character and character.Parent == workspace then
            currentCharacters[character] = true
            if not cache[character] then
                createEsp(character)
            end
        end
    end

    -- Add mobs from workspace.Mobs
    local mobsFolder = workspace:FindFirstChild("Mobs")
    if mobsFolder then
        for _, mob in ipairs(mobsFolder:GetChildren()) do
            if mob:IsA("Model") then
                currentCharacters[mob] = true
                if not cache[mob] then
                    createEsp(mob)
                end
            end
        end
    end

    -- Remove ESP from entities no longer in workspace
    for entity, _ in pairs(cache) do
        if not currentCharacters[entity] or not entity.Parent then
            removeEsp(entity)
        end
    end
end

RunService.RenderStepped:Connect(function()
    updateEspCache()
    updateEsp()
end)
return(ESP_SETTINGS)
