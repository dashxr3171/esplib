-- ModuleScript: ESPModule
local ESP = {}
ESP.Settings = {
    Enabled = true,
    ShowBox = true,
    BoxType = "Corner", -- Box or Corner
    BoxColor = Color3.fromRGB(255,255,255),
    BoxBorderColor = Color3.fromRGB(0,0,0),
    ShowSkeletons = false,
    SkeletonColor = Color3.fromRGB(255,255,255),
    SkeletonBorderColor = Color3.fromRGB(0,0,0),
    ShowTracer = true,
    TracerColor = Color3.fromRGB(255,255,255),
    TracerBorderColor = Color3.fromRGB(0,0,0),
    TracerThickness = 1,
    ShowName = true,
    NameColor = Color3.fromRGB(255,255,255),
    ShowHealth = true,
    HealthLowColor = Color3.fromRGB(255,0,0),
    HealthHighColor = Color3.fromRGB(0,255,0),
    ShowDistance = true,
    DistanceColor = Color3.fromRGB(255,255,255),
    InvisColor = Color3.fromRGB(255,0,0)
}

local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local camera = workspace.CurrentCamera
local localPlayer = Players.LocalPlayer
local cache = {}

local bones = {
    {"Head", "UpperTorso"}, {"UpperTorso","RightUpperArm"}, {"RightUpperArm","RightLowerArm"},
    {"RightLowerArm","RightHand"}, {"UpperTorso","LeftUpperArm"}, {"LeftUpperArm","LeftLowerArm"},
    {"LeftLowerArm","LeftHand"}, {"UpperTorso","LowerTorso"}, {"LowerTorso","LeftUpperLeg"},
    {"LeftUpperLeg","LeftLowerLeg"}, {"LeftLowerLeg","LeftFoot"}, {"LowerTorso","RightUpperLeg"},
    {"RightUpperLeg","RightLowerLeg"}, {"RightLowerLeg","RightFoot"}
}

-- Helper functions
local function create(class, properties)
    local drawing = Drawing.new(class)
    for k,v in pairs(properties) do drawing[k]=v end
    return drawing
end

local function safeRemove(obj)
    if not obj then return end
    if type(obj.Remove)=="function" then pcall(obj.Remove,obj) return end
    if type(obj)=="table" then
        for _,v in ipairs(obj) do
            if type(v)=="table" then
                for _,sub in ipairs(v) do
                    if sub and type(sub.Remove)=="function" then pcall(sub.Remove,sub) end
                end
            elseif v and type(v.Remove)=="function" then pcall(v.Remove,v) end
        end
    end
end

local function removeEsp(entity)
    local esp = cache[entity]
    if not esp then return end
    for _,v in pairs(esp) do
        safeRemove(v)
    end
    cache[entity]=nil
end

-- Create ESP for entity
function ESP:CreateESP(entity)
    if cache[entity] then return end
    local esp = {
        tracerBorder = create("Line",{Thickness=self.Settings.TracerThickness+2, Color=self.Settings.TracerBorderColor}),
        tracer = create("Line",{Thickness=self.Settings.TracerThickness, Color=self.Settings.TracerColor}),
        boxBorder = create("Square",{Thickness=3, Color=self.Settings.BoxBorderColor, Filled=false}),
        box = create("Square",{Thickness=1, Color=self.Settings.BoxColor, Filled=false}),
        cornerBoxBorderLines = {},
        cornerBoxLines = {},
        name = create("Text",{Outline=true, Color=self.Settings.NameColor, OutlineColor=Color3.new(0,0,0), Center=true, Size=13}),
        healthBorder = create("Square",{Filled=true, Color=self.Settings.HealthHighColor}),
        health = create("Square",{Filled=true, Color=self.Settings.HealthHighColor}),
        distance = create("Text",{Outline=true, Color=self.Settings.DistanceColor, OutlineColor=Color3.new(0,0,0), Center=true, Size=15}),
        skeletonlines = {}
    }
    -- corner box lines
    for i=1,8 do
        table.insert(esp.cornerBoxBorderLines, create("Line",{Color=self.Settings.BoxBorderColor, Thickness=3}))
        table.insert(esp.cornerBoxLines, create("Line",{Color=self.Settings.BoxColor, Thickness=1}))
    end
    -- skeleton lines
    local player = Players:GetPlayerFromCharacter(entity)
    if player then
        for _,bonePair in ipairs(bones) do
            table.insert(esp.skeletonlines,{create("Line",{Thickness=3,Color=self.Settings.SkeletonBorderColor}), create("Line",{Thickness=1,Color=self.Settings.SkeletonColor}), bonePair[1], bonePair[2]})
        end
    end
    cache[entity]=esp
end

-- Update ESP for all entities
function ESP:UpdateESP()
    for entity, esp in pairs(cache) do
        if not entity.Parent then removeEsp(entity) continue end
        local hrp = entity:FindFirstChild("HumanoidRootPart") or entity:FindFirstChild("Torso") or entity:FindFirstChild("UpperTorso")
        local humanoid = entity:FindFirstChildWhichIsA("Humanoid")
        if not hrp then
            for _,v in pairs(esp) do if v.Visible then v.Visible=false end end
            continue
        end
        local screenPos, onScreen = camera:WorldToViewportPoint(hrp.Position)
        if not onScreen then
            for _,v in pairs(esp) do if v.Visible then v.Visible=false end end
            continue
        end
        -- Tracer
        if self.Settings.ShowTracer then
            local fromPos = Vector2.new(camera.ViewportSize.X/2, camera.ViewportSize.Y)
            esp.tracer.From = fromPos; esp.tracer.To=Vector2.new(screenPos.X,screenPos.Y); esp.tracer.Visible=true
            esp.tracerBorder.From=fromPos; esp.tracerBorder.To=Vector2.new(screenPos.X,screenPos.Y); esp.tracerBorder.Visible=true
        else esp.tracer.Visible=false; esp.tracerBorder.Visible=false end
        -- Name
        if self.Settings.ShowName then
            esp.name.Text = entity.Name
            esp.name.Position = Vector2.new(screenPos.X, screenPos.Y-16)
            esp.name.Visible = true
        else esp.name.Visible=false end
    end
end

-- Scan workspace and create ESP
function ESP:ScanWorkspace()
    local entities = {}
    for _,obj in ipairs(workspace:GetChildren()) do
        if obj:IsA("Model") and obj:FindFirstChildWhichIsA("Humanoid") and obj:FindFirstChild("HumanoidRootPart") then
            entities[obj]=true
        end
    end
    local mobsFolder = workspace:FindFirstChild("Mobs")
    if mobsFolder then
        for _,mob in ipairs(mobsFolder:GetChildren()) do
            if mob:IsA("Model") then entities[mob]=true end
        end
    end
    for entity,_ in pairs(entities) do
        if not cache[entity] then self:CreateESP(entity) end
    end
    for entity,_ in pairs(cache) do
        if not entities[entity] or not entity.Parent then removeEsp(entity) end
    end
end

-- Run the update loop
RunService.RenderStepped:Connect(function()
    ESP:ScanWorkspace()
    ESP:UpdateESP()
end)

return ESP
