local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local localPlayer = Players.LocalPlayer
local camera = workspace.CurrentCamera
local cache = {}

local bones = {
    {"Head", "UpperTorso"},
    {"UpperTorso", "RightUpperArm"},
    {"RightUpperArm", "RightLowerArm"},
    {"RightLowerArm", "RightHand"},
    {"UpperTorso", "LeftUpperArm"},
    {"LeftUpperArm", "LeftLowerArm"},
    {"LeftLowerArm", "LeftHand"},
    {"UpperTorso", "LowerTorso"},
    {"LowerTorso", "LeftUpperLeg"},
    {"LeftUpperLeg", "LeftLowerLeg"},
    {"LeftLowerLeg", "LeftFoot"},
    {"LowerTorso", "RightUpperLeg"},
    {"RightUpperLeg", "RightLowerLeg"},
    {"RightLowerLeg", "RightFoot"}
}

local ESP_SETTINGS = {
    MainThemeColor = Color3.fromRGB(255, 255, 255),
    BorderColor = Color3.fromRGB(0, 0, 0),
    TracerThickness = 1,
    CharSize = Vector2.new(4, 6),
    Teamcheck = false,
    WallCheck = true,
    Enabled = false,
    ShowBox = false,
    BoxType = "Box",
    ShowName = false,
    ShowHealth = false,
    ShowDistance = false,
    ShowSkeletons = false,
    ShowTracer = false,
    TracerPosition = "Bottom",
    SkeletonVisible = false,
    SkeletonColor = false,
    ESPVisible = false,
    ESPColor = Color3.fromRGB(255, 0, 0)
}

local HEALTH_BAR_WIDTH = 3

local function create(class, properties)
    local drawing = Drawing.new(class)
    for property, value in pairs(properties) do
        drawing[property] = value
    end
    return drawing
end

local function safeRemove(obj)
    if not obj then return end
    if type(obj.Remove) == "function" then
        pcall(obj.Remove, obj)
        return
    end
    if type(obj) == "table" then
        for _, v in ipairs(obj) do
            if type(v) == "table" then
                for _, sub in ipairs(v) do
                    if sub and type(sub.Remove) == "function" then
                        pcall(sub.Remove, sub)
                    end
                end
            elseif v and type(v.Remove) == "function" then
                pcall(v.Remove, v)
            end
        end
    end
end

local function removeEsp(player)
    local esp = cache[player]
    if not esp then return end
    for _, v in pairs(esp) do
        safeRemove(v)
    end
    cache[player] = nil
end

local function isPlayerBehindWall(player)
    local character = player.Character
    if not character then return false end
    local rootPart = character:FindFirstChild("HumanoidRootPart")
    if not rootPart then return false end

    local params = RaycastParams.new()
    params.FilterDescendantsInstances = {localPlayer.Character, character}
    params.FilterType = Enum.RaycastFilterType.Blacklist
    params.IgnoreWater = true

    local origin = camera.CFrame.Position
    local direction = rootPart.Position - origin
    local result = workspace:Raycast(origin, direction, params)
    if result then
        return true
    else
        return false
    end
end

local function createCornerBoxLines(color, thickness)
    local lines = {}
    for i = 1, 8 do
        lines[i] = create("Line", {Color = color, Thickness = thickness, Transparency = 1})
    end
    return lines
end

local function updateCornerBoxLines(lines, pos, size)
    local lineLengthW = size.X / 4
    local lineLengthH = size.Y / 4

    lines[1].From = pos
    lines[1].To = Vector2.new(pos.X + lineLengthW, pos.Y)

    lines[2].From = pos
    lines[2].To = Vector2.new(pos.X, pos.Y + lineLengthH)

    lines[3].From = Vector2.new(pos.X + size.X, pos.Y)
    lines[3].To = Vector2.new(pos.X + size.X - lineLengthW, pos.Y)

    lines[4].From = Vector2.new(pos.X + size.X, pos.Y)
    lines[4].To = Vector2.new(pos.X + size.X, pos.Y + lineLengthH)

    lines[5].From = Vector2.new(pos.X, pos.Y + size.Y)
    lines[5].To = Vector2.new(pos.X + lineLengthW, pos.Y + size.Y)

    lines[6].From = Vector2.new(pos.X, pos.Y + size.Y)
    lines[6].To = Vector2.new(pos.X, pos.Y + size.Y - lineLengthH)

    lines[7].From = Vector2.new(pos.X + size.X, pos.Y + size.Y)
    lines[7].To = Vector2.new(pos.X + size.X - lineLengthW, pos.Y + size.Y)

    lines[8].From = Vector2.new(pos.X + size.X, pos.Y + size.Y)
    lines[8].To = Vector2.new(pos.X + size.X, pos.Y + size.Y - lineLengthH)

    for _, line in ipairs(lines) do
        line.Visible = true
    end
end

local function getPlayerTeam(player)
    if player.Team then return player.Team end
    local attr = player:GetAttribute("Team") or player:GetAttribute("team")
    return attr
end

local function createEsp(player)
    local esp = {
        tracerBorder = create("Line", {Thickness = ESP_SETTINGS.TracerThickness + 2, Color = ESP_SETTINGS.BorderColor}),
        tracer = create("Line", {Thickness = ESP_SETTINGS.TracerThickness, Color = ESP_SETTINGS.MainThemeColor}),

        boxBorder = create("Square", {Thickness = 3, Color = ESP_SETTINGS.BorderColor, Filled = false}),
        box = create("Square", {Thickness = 1, Color = ESP_SETTINGS.MainThemeColor, Filled = false}),

        cornerBoxBorderLines = createCornerBoxLines(ESP_SETTINGS.BorderColor, 3),
        cornerBoxLines = createCornerBoxLines(ESP_SETTINGS.MainThemeColor, 1),

        name = create("Text", {
            Outline = true,
            Color = Color3.new(1, 1, 1),
            OutlineColor = Color3.new(0, 0, 0),
            Center = true,
            Size = 13,
        }),

        healthBorder = create("Square", {Filled = true, Color = Color3.new(0,0,0)}),
        health = create("Square", {Filled = true, Color = ESP_SETTINGS.MainThemeColor}),

        distance = create("Text", {
            Outline = true,
            Color = Color3.new(1, 1, 1),
            OutlineColor = Color3.new(0, 0, 0),
            Center = true,
            Size = 15,
        }),

        skeletonlines = {},
    }

    for _, bonePair in ipairs(bones) do
        local borderLine = create("Line", {Thickness = 3, Color = ESP_SETTINGS.BorderColor})
        local mainLine = create("Line", {Thickness = 1, Color = ESP_SETTINGS.MainThemeColor})
        table.insert(esp.skeletonlines, {borderLine, mainLine, bonePair[1], bonePair[2]})
    end

    cache[player] = esp
end

local function updateEsp()
    for player, esp in pairs(cache) do
        esp.tracer.Color = ESP_SETTINGS.MainThemeColor
        esp.tracerBorder.Color = ESP_SETTINGS.BorderColor
        esp.box.Color = ESP_SETTINGS.MainThemeColor
        esp.boxBorder.Color = ESP_SETTINGS.BorderColor

        for _, line in ipairs(esp.cornerBoxLines) do
            line.Color = ESP_SETTINGS.MainThemeColor
        end
        for _, line in ipairs(esp.cornerBoxBorderLines) do
            line.Color = ESP_SETTINGS.BorderColor
        end

        for _, lineData in ipairs(esp.skeletonlines) do
            lineData[2].Color = ESP_SETTINGS.MainThemeColor
            lineData[1].Color = ESP_SETTINGS.BorderColor
        end

        local character = player.Character
        local playerTeam = getPlayerTeam(player)
        local localTeam = getPlayerTeam(localPlayer)

        if character and (not ESP_SETTINGS.Teamcheck or (playerTeam and localTeam and playerTeam ~= localTeam)) then
            local rootPart = character:FindFirstChild("HumanoidRootPart")
            local head = character:FindFirstChild("Head")
            local humanoid = character:FindFirstChild("Humanoid")
            local isBehindWall = ESP_SETTINGS.WallCheck and isPlayerBehindWall(player)

            local shouldShow = ESP_SETTINGS.Enabled and (ESP_SETTINGS.ESPVisible or not isBehindWall)

            if rootPart and head and humanoid and shouldShow then
                local hrp2D, onScreen = camera:WorldToViewportPoint(rootPart.Position)
                if onScreen then
                    local charHeight = math.abs(camera:WorldToViewportPoint(rootPart.Position - Vector3.new(0, 3, 0)).Y - camera:WorldToViewportPoint(rootPart.Position + Vector3.new(0, 2.6, 0)).Y)
                    local boxSize = Vector2.new(math.floor(charHeight * 0.6), math.floor(charHeight))
                    local boxPosition = Vector2.new(math.floor(hrp2D.X - boxSize.X / 2), math.floor(hrp2D.Y - boxSize.Y / 2))

                    local currentColor = (isBehindWall and ESP_SETTINGS.ESPVisible) and ESP_SETTINGS.ESPColor or ESP_SETTINGS.MainThemeColor
                    local borderColor = ESP_SETTINGS.BorderColor

                    esp.tracer.Color = currentColor
                    esp.tracerBorder.Color = borderColor
                    esp.box.Color = currentColor
                    esp.boxBorder.Color = borderColor

                    for _, line in ipairs(esp.cornerBoxLines) do
                        line.Color = currentColor
                    end
                    for _, line in ipairs(esp.cornerBoxBorderLines) do
                        line.Color = borderColor
                    end

                    for _, lineData in ipairs(esp.skeletonlines) do
                        lineData[2].Color = currentColor
                        lineData[1].Color = borderColor
                    end

                    if ESP_SETTINGS.ShowBox then
                        if ESP_SETTINGS.BoxType == "Box" then
                            esp.boxBorder.Size = boxSize
                            esp.boxBorder.Position = boxPosition
                            esp.box.Size = boxSize
                            esp.box.Position = boxPosition
                            esp.boxBorder.Visible = true
                            esp.box.Visible = true
                            for _, line in ipairs(esp.cornerBoxBorderLines) do line.Visible = false end
                            for _, line in ipairs(esp.cornerBoxLines) do line.Visible = false end
                        elseif ESP_SETTINGS.BoxType == "Corner" then
                            esp.boxBorder.Visible = false
                            esp.box.Visible = false
                            updateCornerBoxLines(esp.cornerBoxBorderLines, boxPosition, boxSize)
                            updateCornerBoxLines(esp.cornerBoxLines, boxPosition, boxSize)
                        else
                            esp.boxBorder.Visible = false
                            esp.box.Visible = false
                            for _, line in ipairs(esp.cornerBoxBorderLines) do line.Visible = false end
                            for _, line in ipairs(esp.cornerBoxLines) do line.Visible = false end
                        end
                    else
                        esp.boxBorder.Visible = false
                        esp.box.Visible = false
                        for _, line in ipairs(esp.cornerBoxBorderLines) do line.Visible = false end
                        for _, line in ipairs(esp.cornerBoxLines) do line.Visible = false end
                    end

                    if ESP_SETTINGS.ShowName then
                        local pos = Vector2.new(boxPosition.X + boxSize.X / 2, boxPosition.Y - 16)
                        esp.name.Text = player.Name
                        esp.name.Position = pos
                        esp.name.Color = currentColor
                        esp.name.Visible = true
                    else
                        esp.name.Visible = false
                    end

                    if ESP_SETTINGS.ShowHealth then
                        local healthPerc = math.clamp(humanoid.Health / math.max(humanoid.MaxHealth, 1), 0, 1)
                        local barHeight = boxSize.Y * healthPerc
                        local barX = boxPosition.X - HEALTH_BAR_WIDTH - 2
                        local barY = boxPosition.Y + boxSize.Y - barHeight

                        esp.healthBorder.Position = Vector2.new(barX - 1, boxPosition.Y)
                        esp.healthBorder.Size = Vector2.new(HEALTH_BAR_WIDTH + 2, boxSize.Y)
                        esp.healthBorder.Visible = true
                        esp.healthBorder.Color = Color3.new(0, 0, 0)

                        esp.health.Position = Vector2.new(barX, barY)
                        esp.health.Size = Vector2.new(HEALTH_BAR_WIDTH, barHeight)
                        esp.health.Color = Color3.new(1,0,0):Lerp(Color3.new(0,1,0), healthPerc)
                        esp.health.Visible = true
                    else
                        esp.healthBorder.Visible = false
                        esp.health.Visible = false
                    end

                    if ESP_SETTINGS.ShowDistance then
                        local dist = math.floor((camera.CFrame.Position - rootPart.Position).Magnitude + 0.5)
                        esp.distance.Text = string.format("[%d]", dist)
                        local distPos = Vector2.new(boxPosition.X + boxSize.X / 2, boxPosition.Y + boxSize.Y + 2)
                        esp.distance.Position = distPos
                        esp.distance.Color = currentColor
                        esp.distance.Visible = true
                    else
                        esp.distance.Visible = false
                    end

                    if ESP_SETTINGS.ShowSkeletons then
                        for _, lineData in ipairs(esp.skeletonlines) do
                            local borderLine, mainLine, parentBone, childBone = unpack(lineData)
                            if character:FindFirstChild(parentBone) and character:FindFirstChild(childBone) then
                                local p1, onScreen1 = camera:WorldToViewportPoint(character[parentBone].Position)
                                local p2, onScreen2 = camera:WorldToViewportPoint(character[childBone].Position)
                                if onScreen1 and onScreen2 then
                                    borderLine.From = Vector2.new(p1.X, p1.Y)
                                    borderLine.To = Vector2.new(p2.X, p2.Y)
                                    mainLine.From = Vector2.new(p1.X, p1.Y)
                                    mainLine.To = Vector2.new(p2.X, p2.Y)
                                    borderLine.Visible = true
                                    mainLine.Visible = true

                                    borderLine.Color = borderColor
                                    mainLine.Color = currentColor
                                else
                                    borderLine.Visible = false
                                    mainLine.Visible = false
                                end
                            else
                                borderLine.Visible = false
                                mainLine.Visible = false
                            end
                        end
                    else
                        for _, lineData in ipairs(esp.skeletonlines) do
                            lineData[1].Visible = false
                            lineData[2].Visible = false
                        end
                    end

                    if ESP_SETTINGS.ShowTracer then
                        local tracerY = (ESP_SETTINGS.TracerPosition == "Top" and 0) or (ESP_SETTINGS.TracerPosition == "Middle" and camera.ViewportSize.Y / 2) or camera.ViewportSize.Y
                        esp.tracerBorder.From = Vector2.new(camera.ViewportSize.X / 2, tracerY)
                        esp.tracer.From = Vector2.new(camera.ViewportSize.X / 2, tracerY)
                        esp.tracerBorder.To = Vector2.new(hrp2D.X, hrp2D.Y)
                        esp.tracer.To = Vector2.new(hrp2D.X, hrp2D.Y)
                        esp.tracerBorder.Visible = true
                        esp.tracer.Visible = true

                        esp.tracer.Color = currentColor
                        esp.tracerBorder.Color = borderColor
                    else
                        esp.tracerBorder.Visible = false
                        esp.tracer.Visible = false
                    end
                else
                    for _, v in pairs(esp) do
                        if type(v) == "table" then
                            for _, obj in ipairs(v) do
                                if obj.Visible ~= nil then
                                    obj.Visible = false
                                end
                            end
                        elseif v.Visible ~= nil then
                            v.Visible = false
                        end
                    end
                    for _, lineData in ipairs(esp.skeletonlines) do
                        lineData[1].Visible = false
                        lineData[2].Visible = false
                    end
                end
            else
                for _, v in pairs(esp) do
                    if type(v) == "table" then
                        for _, obj in ipairs(v) do
                            if obj.Visible ~= nil then
                                obj.Visible = false
                            end
                        end
                    elseif v.Visible ~= nil then
                        v.Visible = false
                    end
                end
                for _, lineData in ipairs(esp.skeletonlines) do
                    lineData[1].Visible = false
                    lineData[2].Visible = false
                end
            end
        else
            for _, v in pairs(esp) do
                if type(v) == "table" then
                    for _, obj in ipairs(v) do
                        if obj.Visible ~= nil then
                            obj.Visible = false
                        end
                    end
                elseif v.Visible ~= nil then
                    v.Visible = false
                end
            end
            for _, lineData in ipairs(esp.skeletonlines) do
                lineData[1].Visible = false
                lineData[2].Visible = false
            end
        end
    end
end

for _, player in ipairs(Players:GetPlayers()) do
    if player ~= localPlayer then
        createEsp(player)
    end
end

Players.PlayerAdded:Connect(function(player)
    if player ~= localPlayer then
        createEsp(player)
    end
end)

Players.PlayerRemoving:Connect(removeEsp)
RunService.RenderStepped:Connect(updateEsp)

return ESP_SETTINGS
